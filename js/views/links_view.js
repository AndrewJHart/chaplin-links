// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['chaplin', 'views/base/collection_view', 'views/link_view', 'text!templates/read_links.hbs'], function(Chaplin, CollectionView, LinkView, template) {
  'use strict';

  var LinksView, mediator;
  mediator = Chaplin.mediator;
  return LinksView = (function(_super) {

    __extends(LinksView, _super);

    function LinksView() {
      this.filterByCurrentTag = __bind(this.filterByCurrentTag, this);

      this.setCurrentTag = __bind(this.setCurrentTag, this);
      return LinksView.__super__.constructor.apply(this, arguments);
    }

    LinksView.prototype.template = template;

    template = null;

    LinksView.prototype.container = '#links-section';

    /* collection related
    */


    LinksView.prototype.className = 'links';

    LinksView.prototype.tagName = 'div';

    LinksView.prototype.id = 'link-list';

    LinksView.prototype.listSelector = 'ul';

    LinksView.prototype.initialize = function() {
      LinksView.__super__.initialize.apply(this, arguments);
      this.subscribeEvent('startupController', this.onStartup);
      this.subscribeEvent('beforeControllerDispose', this.onDisposal);
      return this.subscribeEvent('TagsSidebarView:tagClicked', this.setCurrentTag);
    };

    LinksView.prototype.getView = function(item) {
      return new LinkView({
        model: item
      });
    };

    LinksView.prototype.onStartup = function(e) {
      return mediator.publish('Links:startup');
    };

    LinksView.prototype.onDisposal = function(e) {
      return mediator.publish('Links:disposal');
    };

    LinksView.prototype.setCurrentTag = function(tag) {
      this.current_tag = tag;
      return this.filter(this.filterByCurrentTag);
    };

    LinksView.prototype.filterByCurrentTag = function(link, idx) {
      var current_tag, intersection, link_tags;
      if (this.current_tag) {
        link_tags = link.get('tags').split(",");
        current_tag = [this.current_tag];
        intersection = _.intersection(current_tag, link_tags);
        if (intersection.length > 0) {
          return link;
        } else {
          return false;
        }
      }
    };

    return LinksView;

  })(CollectionView);
});
